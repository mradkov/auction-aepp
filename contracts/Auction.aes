@compiler >= 4

contract Auction =

  record state = 
    { owner           : address
    , start_block     : int
    , end_block       : int
    , canceled        : bool
    , highest_bidder  : address
    , funds_by_bidder : map(address, int) }

  datatype event = Bid(address, int)
    | Withdrawal(address, int)
    | Canceled(string)

  /*
  * @dev - Initializing function / constructor
  * @param _start_block : int - the number of the auction starting block
  * @param _end_block : int - the number of the auction ending block
  */
  entrypoint init(_start_block: int, _end_block: int) : state =
    require(_start_block =< _end_block, "Start block should be smaller than the ending block.")
    require(_start_block > Chain.block_height, "The starting block should be greater than the current chain block.")
    { owner           = Call.caller,
      start_block     = _start_block,
      end_block       = _end_block,
      canceled        = false,
      highest_bidder  = Call.caller,
      funds_by_bidder = {} }

  /*
  * @dev - Function to place bid in the auction
  */
  stateful entrypoint place_bid() : unit =
    only_after_start()
    only_before_end()
    only_not_canceled()
    only_not_owner()
    
    // reject transactions without value
    require(Call.value > 0, "Please provide more than 0 AEs.")

    // calculate the user's total bid based on the current amount they've sent to the contract
    // plus whatever has been sent with this transaction
    let new_bid = state.funds_by_bidder[Call.caller] + Call.value
    
    // get the current highest bid
    let last_highest_bid = state.funds_by_bidder[state.highest_bidder]
        
    // if the user isn't even willing to overbid the highest bid, there's nothing for us
    // to do except revert the transaction.
    require (new_bid > last_highest_bid, "The provided amount is not enough for overbid.")
    
    // update the user bid
    put(state{ funds_by_bidder[Call.caller] = new_bid, highest_bidder = Call.caller })
    Chain.event(Bid(Call.caller, new_bid))

  /*
  * @dev - Function for withdrawing the funds
  */
  stateful entrypoint withdraw() : unit =
    only_ended_or_canceled()
    let withdrawal_amount : int = 
      switch(state.canceled)
        true =>
            // the auction is cancelled and everyone can withdraw the bidding value they put in
            state.funds_by_bidder[Call.caller]
        false =>
            // the auction is not cancelled and its finished normally
            // the highest bidder cannot withdraw his bids
            require(Call.caller != state.highest_bidder, "The caller should not be the highest bidder.")
            // we check if the caller is the auction owner
            if (Call.caller == state.owner)
              // if its the onwer we give him the value of the winning/highest bid
              state.funds_by_bidder[state.highest_bidder]
            else
              // if its somebody else /other participant/ - he can withdraw his bids
              state.funds_by_bidder[Call.caller]
    
    // we process the payment
    withdraw'(Call.caller, withdrawal_amount)

  /*
  * @dev - Function for changing the auction state to cancelled
  */
  stateful entrypoint cancel_auction() : unit =
    only_owner()
    only_before_end()
    only_not_canceled()
    put(state { canceled = true })
    Chain.event(Canceled("Auction cancelled."))

  /*
  * @dev - Internal helper function for withdrawing the funds
  * @param beneficiary : address - the address to whom to send the funds
  * @param amount : int - the amount to send
  */
  stateful function withdraw'(beneficiary : address, amount : int) : unit =
    require (amount > 0, "Cannot withdraw 0.")
    put(state{ funds_by_bidder[beneficiary] = state.funds_by_bidder[beneficiary] - amount })
    Chain.spend(beneficiary, amount)
    Chain.event(Withdrawal(beneficiary, amount))

  /*
  * @dev - Internal helper function used as modifier for checking if the auction is still active
  */
  function only_running() =
    only_not_canceled()
    require((Chain.block_height > state.start_block) && (Chain.block_height < state.end_block), "Blocks heights are not correct!")    

  /*
  * @dev - Internal helper function used as modifier for checking if the caller is the owner
  */
  function only_owner() =
    require(Call.caller == state.owner, "Only the owner is allowed!")

  /*
  * @dev - Internal helper function used as modifier for checking if the caller is NOT the owner
  */
  function only_not_owner() =
    require(Call.caller != state.owner, "Owner is not allowed!")

  /*
  * @dev - Internal helper function used as modifier for checking if the call is made after the auction start
  */
  function only_after_start() =
    require(Chain.block_height > state.start_block, "The auction is not started!")

  /*
  * @dev - Internal helper function used as modifier for checking if the call is made before the auction end
  */
  function only_before_end() =
    require(Chain.block_height < state.end_block, "Already ended.")

  /*
  * @dev - Internal helper function used as modifier for checking if the call is made while the auction is not cancelled
  */
  function only_not_canceled() =
    require(state.canceled == false, "Auction is cancelled.")

  /*
  * @dev - Internal helper function used as modifier for checking if the call is made after the auction is ended or cancelled
  */
  function only_ended_or_canceled() =
    require((Chain.block_height > state.end_block) || (state.canceled == true), "The auction is not ended or cancelled.")